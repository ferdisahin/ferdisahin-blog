import Head from "next/head";
import { GraphQLClient, gql } from "graphql-request";

const graphcms = new GraphQLClient(process.env.GRAPHCMS_CONTENT_API);

import Header from "../../components/Header";
import Footer from "../../components/Footer";
import Post from "../../components/Post";

const QUERY = gql`
query Category($slug: String!){
    category(where: {slug: $slug}){
        id,
        title,
        slug,
        posts{
            id,
            title,
            date_published,
            slug,
            content{
              html
            },
            author{
              name,
              avatar{
                url
              }
            },
            coverPhoto{
              url
            },
            categories{
                id,
                title,
                slug
            }            
        },
    }
}
`

const SLUGLIST = gql`
  {
    categories{
        slug
    }
  }
`

export async function getStaticPaths(){
    const {categories} = await graphcms.request(SLUGLIST);
    return{
        paths: categories.map((category) => ({params: {slug: category.slug}})),
        fallback: false
    }
}

export async function getStaticProps({params}){
    const slug = params.slug;
    const data = await graphcms.request(QUERY, {slug});
    const category = data.category;
    return{
        props: {
            category
        },
        revalidate: 10
    }
}

export default function Categories({category}){
    const posts = category.posts;
    return (
        <>
            <Head>
                <title>{`${category.title} - ${process.env.NEXT_PUBLIC_SITE_NAME}`}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />      
            </Head>

            <Header />        
            <div className="my-24">
                <div className="font-bold text-2xl mb-8">{category.title}</div>

                {posts.map((item) => (
                    <Post key={item.id} item={item} />
                )).sort().reverse()}
            </div>
            <Footer />        
        </>
    )
}